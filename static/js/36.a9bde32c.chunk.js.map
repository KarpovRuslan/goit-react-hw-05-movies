{"version":3,"file":"static/js/36.a9bde32c.chunk.js","mappings":"4LAEaA,EAAS,WACpB,OAAO,SAAC,KAAD,CAAcC,MAAM,MAAMC,MAAM,UAAUC,SAAS,GAC3D,C,0GCDYC,EAAOC,EAAAA,GAAAA,GAAH,sHAQJC,EAAOD,EAAAA,GAAAA,GAAH,kEAKJE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,oKAWTI,EAAWJ,EAAAA,GAAAA,KAAH,2C,SCvBRK,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACT,EAAD,UACGO,EAAOG,KAAI,SAAAC,GAAK,OACf,SAACT,EAAD,WACE,UAACC,EAAD,CAAWS,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAArD,UACGG,EAAMK,OACP,UAACX,EAAD,gBAAaY,OAAOC,SAASP,EAAMQ,cAAnC,WAHOR,EAAME,GADF,OAWxB,C,sEClBYO,E,QAAUnB,GAAAA,IAAH,qE,0LCCPoB,EAAUpB,EAAAA,GAAAA,IAAH,sJAQPqB,EAAQrB,EAAAA,GAAAA,MAAH,+FAMLsB,GAAOtB,EAAAA,EAAAA,IAAOuB,EAAAA,IAAPvB,CAAH,+F,SCfJwB,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjC,OACE,UAACN,EAAD,YACE,SAACE,EAAD,KACA,SAACD,EAAD,CACEM,KAAK,OACLF,MAAOA,EACPC,SAAU,SAAAE,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,MAAtB,MAIlB,E,mBCmCD,EAvCe,WAAO,IAAD,EACnB,GAA4BK,EAAAA,EAAAA,UAAS,MAArC,eAAOxB,EAAP,KAAeyB,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAU,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAsBhD,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIN,GAAa,GAFjB,UAGuBO,EAAAA,EAAAA,IAAWH,GAHlC,OAGUI,EAHV,OAIIV,EAAUU,GAJd,gDAMIC,QAAQC,IAAI,KAAMC,SANtB,yBAQIX,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdY,CAAYR,EACb,GAAE,CAACA,KAGF,6BACE,SAACb,EAAD,CAAWC,MAAOY,EAAYX,SAtBb,SAAAoB,GAEnBV,EAD6B,KAAVU,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,IAoBId,IACC,SAAC,IAAD,WACE,SAACrC,EAAA,EAAD,MAGQ,OAAXW,IAAmB,SAACD,EAAA,EAAD,CAAWC,OAAQA,MAG5C,C,kJC7CDyC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAS,mCAAG,oGACJF,EAAAA,EAAAA,IAAA,qCAAwCC,IADpC,cACjBE,EADiB,yBAEhBA,EAAKT,KAAKU,SAFM,2CAAH,qDAKTC,EAAa,mCAAG,WAAMC,GAAN,yFACJN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,oBAAsCL,IADlC,uBACnBP,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbD,EAAU,mCAAG,WAAMM,GAAN,uFACLC,EAAAA,EAAAA,IAAA,+BACOC,EADP,kBACwBF,IAFnB,cAClBI,EADkB,yBAIjBA,EAAKT,KAAKU,SAJO,2CAAH,qD","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/Home.styled.js","components/SearchBox/SearchBox.styled.jsx","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx","services/ApiTMDB.js"],"sourcesContent":["import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return <InfinitySpin width=\"200\" color=\"#3f51b5\" visible={true} />;\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  gap: 5px;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  display: inline-block;\n  width: 100%;\n`;\n\nexport const MovieLink = styled(NavLink)`\n  display: inline-block;\n  padding: 3px 16px;\n  color: black;\n  text-decoration: none;\n  :hover,\n  :focus {\n    color: #00008b;\n  }\n`;\n\nexport const FilmYear = styled.span`\n  color: #808080;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink, FilmYear } from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(movie => (\n          <Item key={movie.id}>\n            <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n              <FilmYear> ({Number.parseInt(movie.release_date)})</FilmYear>\n            </MovieLink>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      release_date: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n","import { Wrapper, Input, Icon } from './SearchBox.styled';\n\nexport const SearchBox = ({ value, onChange }) => {\n  return (\n    <Wrapper>\n      <Icon />\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={e => onChange(e.target.value)}\n      />\n    </Wrapper>\n  );\n};\n","// import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FindMovies } from 'services/ApiTMDB';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { SearchBox } from '../../components/SearchBox/SearchBox';\nimport { Loader } from 'components/Loader/Loader';\nimport { Spinner } from '../../pages/Home/Home.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchName = searchParams.get('query') ?? '';\n\n  const handleSearch = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        const data = await FindMovies(searchName);\n        setMovies(data);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovies(searchName);\n  }, [searchName]);\n\n  return (\n    <main>\n      <SearchBox value={searchName} onChange={handleSearch} />\n      {isLoading && (\n        <Spinner>\n          <Loader />\n        </Spinner>\n      )}\n      {movies !== null && <MovieList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '95775b42e188d6443a0bfb132dcec5e1';\n\nexport const GetMovies = async () => {\n  const resp = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return resp.data.results;\n};\n\nexport const GetMoviesById = async movieId => {\n  const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const FindMovies = async query => {\n  const resp = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return resp.data.results;\n};\n"],"names":["Loader","width","color","visible","List","styled","Item","MovieLink","NavLink","FilmYear","MovieList","movies","location","useLocation","map","movie","to","id","state","from","title","Number","parseInt","release_date","Spinner","Wrapper","Input","Icon","HiSearch","SearchBox","value","onChange","type","e","target","useState","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchName","get","useEffect","FindMovies","data","console","log","message","fetchMovies","query","axios","API_KEY","GetMovies","resp","results","GetMoviesById","movieId"],"sourceRoot":""}